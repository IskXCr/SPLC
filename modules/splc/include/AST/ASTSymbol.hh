#ifndef __SPLC_AST_ASTSYMBOL_HH__
#define __SPLC_AST_ASTSYMBOL_HH__ 1

#include "Core/Utils.hh"
#include <iostream>

namespace splc {

namespace internal {

/// Automatically generated by GNU Bison
enum class symbol_kind_type {
    YYNTOKENS = 102, ///< Number of tokens.
    YYEMPTY = -2,
    YYEOF = 0,               // "end of file"
    YYerror = 1,             // error
    YYUNDEF = 2,             // "invalid token"
    KwdAuto = 3,             // KwdAuto
    KwdExtern = 4,           // KwdExtern
    KwdRegister = 5,         // KwdRegister
    KwdStatic = 6,           // KwdStatic
    KwdTypedef = 7,          // KwdTypedef
    KwdConst = 8,            // KwdConst
    KwdRestrict = 9,         // KwdRestrict
    KwdVolatile = 10,        // KwdVolatile
    KwdInline = 11,          // KwdInline
    VoidTy = 12,             // VoidTy
    IntTy = 13,              // IntTy
    SignedTy = 14,           // SignedTy
    UnsignedTy = 15,         // UnsignedTy
    LongTy = 16,             // LongTy
    FloatTy = 17,            // FloatTy
    DoubleTy = 18,           // DoubleTy
    CharTy = 19,             // CharTy
    KwdEnum = 20,            // KwdEnum
    KwdStruct = 21,          // KwdStruct
    KwdUnion = 22,           // KwdUnion
    KwdIf = 23,              // KwdIf
    KwdElse = 24,            // KwdElse
    KwdSwitch = 25,          // KwdSwitch
    KwdWhile = 26,           // KwdWhile
    KwdFor = 27,             // KwdFor
    KwdDo = 28,              // KwdDo
    KwdDefault = 29,         // KwdDefault
    KwdCase = 30,            // KwdCase
    KwdGoto = 31,            // KwdGoto
    KwdContinue = 32,        // KwdContinue
    KwdBreak = 33,           // KwdBreak
    KwdReturn = 34,          // KwdReturn
    ID = 35,                 // ID
    TypedefID = 36,          // TypedefID
    OpAssign = 37,           // OpAssign
    OpMulAssign = 38,        // OpMulAssign
    OpDivAssign = 39,        // OpDivAssign
    OpModAssign = 40,        // OpModAssign
    OpPlusAssign = 41,       // OpPlusAssign
    OpMinusAssign = 42,      // OpMinusAssign
    OpLShiftAssign = 43,     // OpLShiftAssign
    OpRShiftAssign = 44,     // OpRShiftAssign
    OpBAndAssign = 45,       // OpBAndAssign
    OpBXorAssign = 46,       // OpBXorAssign
    OpBOrAssign = 47,        // OpBOrAssign
    OpAnd = 48,              // OpAnd
    OpOr = 49,               // OpOr
    OpNot = 50,              // OpNot
    OpLT = 51,               // OpLT
    OpLE = 52,               // OpLE
    OpGT = 53,               // OpGT
    OpGE = 54,               // OpGE
    OpNE = 55,               // OpNE
    OpEQ = 56,               // OpEQ
    OpQMark = 57,            // OpQMark
    OpColon = 58,            // OpColon
    OpLShift = 59,           // OpLShift
    OpRShift = 60,           // OpRShift
    OpBAnd = 61,             // OpBAnd
    OpBOr = 62,              // OpBOr
    OpBNot = 63,             // OpBNot
    OpBXor = 64,             // OpBXor
    OpDPlus = 65,            // OpDPlus
    OpDMinus = 66,           // OpDMinus
    OpPlus = 67,             // OpPlus
    OpMinus = 68,            // OpMinus
    OpAstrk = 69,            // OpAstrk
    OpDiv = 70,              // OpDiv
    OpMod = 71,              // OpMod
    OpDot = 72,              // OpDot
    OpRArrow = 73,           // OpRArrow
    OpSizeOf = 74,           // OpSizeOf
    OpLSB = 75,              // OpLSB
    OpRSB = 76,              // OpRSB
    OpComma = 77,            // OpComma
    OpEllipsis = 78,         // OpEllipsis
    PSemi = 79,              // PSemi
    PLC = 80,                // PLC
    PRC = 81,                // PRC
    PLP = 82,                // PLP
    PRP = 83,                // PRP
    UIntLiteral = 84,        // UIntLiteral
    SIntLiteral = 85,        // SIntLiteral
    FloatLiteral = 86,       // FloatLiteral
    CharLiteral = 87,        // CharLiteral
    StrUnit = 88,            // StrUnit
    SubscriptExpr = 89,      // SubscriptExpr
    CallExpr = 90,           // CallExpr
    AccessExpr = 91,         // AccessExpr
    ExplicitCastExpr = 92,   // ExplicitCastExpr
    AddrOfExpr = 93,         // AddrOfExpr
    DerefExpr = 94,          // DerefExpr
    SizeOfExpr = 95,         // SizeOfExpr
    KwdThen = 96,            // KwdThen
    OpUnaryPrec = 97,        // OpUnaryPrec
    PLParen = 98,            // PLParen
    PRParen = 99,            // PRParen
    PLSBracket = 100,        // PLSBracket
    PRSBracket = 101,        // PRSBracket
    YYACCEPT = 102,          // $accept
    ParseRoot = 103,         // ParseRoot
    TransUnit = 104,         // TransUnit
    ExternDeclList = 105,    // ExternDeclList
    ExternDecl = 106,        // ExternDecl
    DeclSpec = 107,          // DeclSpec
    StorageSpec = 108,       // StorageSpec
    SpecQualList = 109,      // SpecQualList
    TypeSpec = 110,          // TypeSpec
    FuncSpec = 111,          // FuncSpec
    TypeQual = 112,          // TypeQual
    TypeName = 113,          // TypeName
    BuiltinTypeSpec = 114,   // BuiltinTypeSpec
    AbsDecltr = 115,         // AbsDecltr
    DirAbsDecltr = 116,      // DirAbsDecltr
    StructOrUnionSpec = 117, // StructOrUnionSpec
    StructOrUnion = 118,     // StructOrUnion
    StructDeclBody = 119,    // StructDeclBody
    StructDeclList = 120,    // StructDeclList
    StructDecl = 121,        // StructDecl
    StructDecltrList = 122,  // StructDecltrList
    StructDecltr = 123,      // StructDecltr
    EnumSpec = 124,          // EnumSpec
    EnumBody = 125,          // EnumBody
    EnumeratorList = 126,    // EnumeratorList
    Enumerator = 127,        // Enumerator
    EnumConst = 128,         // EnumConst
    Decltr = 129,            // Decltr
    DirDecltr = 130,         // DirDecltr
    Ptr = 131,               // Ptr
    TypeQualList = 132,      // TypeQualList
    Decl = 133,              // Decl
    DirDecl = 134,           // DirDecl
    InitDecltrList = 135,    // InitDecltrList
    InitDecltr = 136,        // InitDecltr
    Initializer = 137,       // Initializer
    InitializerList = 138,   // InitializerList
    Designation = 139,       // Designation
    DesignatorList = 140,    // DesignatorList
    Designator = 141,        // Designator
    FuncDef = 142,           // FuncDef
    FuncDecltr = 143,        // FuncDecltr
    DirFuncDecltr = 144,     // DirFuncDecltr
    DirDecltrForFunc = 145,  // DirDecltrForFunc
    ParamTypeList = 146,     // ParamTypeList
    ParamList = 147,         // ParamList
    ParamDecl = 148,         // ParamDecl
    CompStmt = 149,          // CompStmt
    GeneralStmtList = 150,   // GeneralStmtList
    Stmt = 151,              // Stmt
    ExprStmt = 152,          // ExprStmt
    SelStmt = 153,           // SelStmt
    LabeledStmt = 154,       // LabeledStmt
    JumpStmt = 155,          // JumpStmt
    IterStmt = 156,          // IterStmt
    ForLoopBody = 157,       // ForLoopBody
    ConstExpr = 158,         // ConstExpr
    Constant = 159,          // Constant
    PrimaryExpr = 160,       // PrimaryExpr
    PostfixExpr = 161,       // PostfixExpr
    MemberAcessOp = 162,     // MemberAcessOp
    UnaryExpr = 163,         // UnaryExpr
    UnaryArithOp = 164,      // UnaryArithOp
    CastExpr = 165,          // CastExpr
    MulExpr = 166,           // MulExpr
    MulOp = 167,             // MulOp
    DivOp = 168,             // DivOp
    AddExpr = 169,           // AddExpr
    AddOp = 170,             // AddOp
    ShiftExpr = 171,         // ShiftExpr
    ShiftOp = 172,           // ShiftOp
    RelExpr = 173,           // RelExpr
    RelOp = 174,             // RelOp
    EqualityExpr = 175,      // EqualityExpr
    EqualityOp = 176,        // EqualityOp
    OpBAndExpr = 177,        // OpBAndExpr
    OpBXorExpr = 178,        // OpBXorExpr
    OpBOrExpr = 179,         // OpBOrExpr
    LogicalOpAndExpr = 180,  // LogicalOpAndExpr
    LogicalOpOrExpr = 181,   // LogicalOpOrExpr
    CondExpr = 182,          // CondExpr
    AssignExpr = 183,        // AssignExpr
    AssignOp = 184,          // AssignOp
    Expr = 185,              // Expr
    InitExpr = 186,          // InitExpr
    ArgList = 187,           // ArgList
    StringLiteral = 188,     // StringLiteral
    IDWrapper = 189          // IDWrapper
};

using SPLSymbolType = symbol_kind_type;

std::string_view getSymbolName(SPLSymbolType sym) noexcept;

std::ostream &printSymbolConsoleTraits(std::ostream &os,
                                       SPLSymbolType symbol) noexcept;

std::ostream &operator<<(std::ostream &os, SPLSymbolType sym) noexcept;

} // namespace internal

//===----------------------------------------------------------------------===//
//                        ASTSymbolType Encapsulations
//===----------------------------------------------------------------------===//

/// This is used to separate code in `Parser.yy` from directly
/// using its symbol_kind_type, thus creating encapsulation and
/// allow easy debugging/replacement of the actual ASTSymbolType.
// using ASTSymbolType = IO::Parser::symbol_kind::symbol_kind_type;
using ASTSymbolType = internal::SPLSymbolType;

inline std::string_view getASTSymbolName(ASTSymbolType sym) noexcept
{
    // return IO::Parser::symbol_name(sym);
    return internal::getSymbolName(sym);
}

// TODO: maybe implement
bool isSymExpr(ASTSymbolType sym) noexcept;
bool isSymStmt(ASTSymbolType sym) noexcept;
bool isSymTypeSpecifier(ASTSymbolType sym) noexcept;
bool isSymTypeQualifier(ASTSymbolType sym) noexcept;
bool isSymStruct(ASTSymbolType sym) noexcept;
bool isSymStruct(ASTSymbolType sym) noexcept;

inline std::ostream &operator<<(std::ostream &os, ASTSymbolType sym) noexcept
{
    return internal::operator<<(os, sym);
}

//===----------------------------------------------------------------------===//
//                      ASTSymbolType Helper Templates
//===----------------------------------------------------------------------===//
template <class... Types>
concept AllAreASTSymbolType =
    (std::is_same_v<ASTSymbolType,
                    typename std::remove_reference<Types>::type> &&
     ...);

template <AllAreASTSymbolType... SourceTypes>
bool isASTSymbolTypeOneOfThem(ASTSymbolType type, SourceTypes &&...otherTypes)
{
    return ((type == otherTypes) || ...);
}

class ASTSymbolColorManipulator {
  public:
    friend ASTSymbolColorManipulator getASTSymbolColor(ASTSymbolType sym);
    friend std::ostream &operator<<(std::ostream &os,
                                    const ASTSymbolColorManipulator &m);

  private:
    ASTSymbolType sym;
    ASTSymbolColorManipulator(ASTSymbolType sym_) : sym{sym_} {}
};

inline ASTSymbolColorManipulator getASTSymbolColor(ASTSymbolType sym)
{
    return ASTSymbolColorManipulator{sym};
}

inline std::ostream &operator<<(std::ostream &os,
                                const ASTSymbolColorManipulator &m)
{
    // using utils::logging::ControlSeq;
    // os << ControlSeq::Bold << ControlSeq::Green;
    internal::printSymbolConsoleTraits(os, m.sym);
    return os;
}

} // namespace splc

#endif // __SPLC_AST_ASTSYMBOL_HH__