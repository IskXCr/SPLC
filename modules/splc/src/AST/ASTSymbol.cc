#include "AST/ASTSymbol.hh"
#include "Core/Utils/ControlSequence.hh"

namespace splc {

namespace internal {

using utils::logging::ControlSeq;

// clang-format off
/// Automatically generated by GNU Bison
#ifdef YY_NULLPTR
#undef YY_NULLPTR
#endif
#define YY_NULLPTR nullptr

const char*
const yytname_[] =
{
"\"end of file\"", "error", "\"invalid token\"", "KwdAuto", "KwdExtern",
"KwdRegister", "KwdStatic", "KwdTypedef", "KwdConst", "KwdRestrict",
"KwdVolatile", "KwdInline", "VoidTy", "IntTy", "SignedTy", "UnsignedTy",
"LongTy", "FloatTy", "DoubleTy", "CharTy", "KwdEnum", "KwdStruct",
"KwdUnion", "KwdIf", "KwdElse", "KwdSwitch", "KwdWhile", "KwdFor",
"KwdDo", "KwdDefault", "KwdCase", "KwdGoto", "KwdContinue", "KwdBreak",
"KwdReturn", "ID", "TypedefID", "OpAssign", "OpMulAssign", "OpDivAssign",
"OpModAssign", "OpPlusAssign", "OpMinusAssign", "OpLShiftAssign",
"OpRShiftAssign", "OpBAndAssign", "OpBXorAssign", "OpBOrAssign", "OpAnd",
"OpOr", "OpNot", "OpLT", "OpLE", "OpGT", "OpGE", "OpNE", "OpEQ",
"OpQMark", "OpColon", "OpLShift", "OpRShift", "OpBAnd", "OpBOr",
"OpBNot", "OpBXor", "OpDPlus", "OpDMinus", "OpPlus", "OpMinus",
"OpAstrk", "OpDiv", "OpMod", "OpDot", "OpRArrow", "OpSizeOf", "OpLSB",
"OpRSB", "OpComma", "OpEllipsis", "PSemi", "PLC", "PRC", "PLP", "PRP",
"UIntLiteral", "SIntLiteral", "FloatLiteral", "CharLiteral", "StrUnit",
"SubscriptExpr", "CallExpr", "AccessExpr", "ExplicitCastExpr",
"AddrOfExpr", "DerefExpr", "SizeOfExpr", "KwdThen", "OpUnaryPrec",
"PLParen", "PRParen", "PLSBracket", "PRSBracket", "$accept", "ParseRoot",
"TransUnit", "ExternDeclList", "ExternDecl", "DeclSpec", "StorageSpec",
"SpecQualList", "TypeSpec", "FuncSpec", "TypeQual", "TypeName",
"BuiltinTypeSpec", "AbsDecltr", "DirAbsDecltr", "StructOrUnionSpec",
"StructOrUnion", "StructDeclBody", "StructDeclList", "StructDecl",
"StructDecltrList", "StructDecltr", "EnumSpec", "EnumBody",
"EnumeratorList", "Enumerator", "EnumConst", "Decltr", "DirDecltr",
"Ptr", "TypeQualList", "Decl", "DirDecl", "InitDecltrList", "InitDecltr",
"Initializer", "InitializerList", "Designation", "DesignatorList",
"Designator", "FuncDef", "FuncDecltr", "DirFuncDecltr",
"DirDecltrForFunc", "ParamTypeList", "ParamList", "ParamDecl",
"CompStmt", "GeneralStmtList", "Stmt", "ExprStmt", "SelStmt",
"LabeledStmt", "JumpStmt", "IterStmt", "ForLoopBody", "ConstExpr",
"Constant", "PrimaryExpr", "PostfixExpr", "MemberAcessOp", "UnaryExpr",
"UnaryArithOp", "CastExpr", "MulExpr", "MulOp", "DivOp", "AddExpr",
"AddOp", "ShiftExpr", "ShiftOp", "RelExpr", "RelOp", "EqualityExpr",
"EqualityOp", "OpBAndExpr", "OpBXorExpr", "OpBOrExpr",
"LogicalOpAndExpr", "LogicalOpOrExpr", "CondExpr", "AssignExpr",
"AssignOp", "Expr", "InitExpr", "ArgList", "StringLiteral", "IDWrapper", YY_NULLPTR
};
// clang-format on

std::string_view getSymbolName(ASTSymbolType symbol) noexcept
{
    return {yytname_[static_cast<int>(symbol)]};
}

std::ostream &printSymbolConsoleTraits(std::ostream &os,
                                       SPLSymbolType symbol) noexcept
{
    switch (symbol) {
    case symbol_kind_type::YYNTOKENS:
    case symbol_kind_type::YYEMPTY:
    case symbol_kind_type::YYEOF:
    case symbol_kind_type::YYerror:
    case symbol_kind_type::YYUNDEF: {
        os << ControlSeq::Bold << ControlSeq::Red;
        break;
    }
    case symbol_kind_type::KwdAuto:
    case symbol_kind_type::KwdExtern:
    case symbol_kind_type::KwdRegister:
    case symbol_kind_type::KwdStatic:
    case symbol_kind_type::KwdTypedef:
    case symbol_kind_type::KwdConst:
    case symbol_kind_type::KwdRestrict:
    case symbol_kind_type::KwdVolatile:
    case symbol_kind_type::KwdInline:
    case symbol_kind_type::VoidTy:
    case symbol_kind_type::IntTy:
    case symbol_kind_type::SignedTy:
    case symbol_kind_type::UnsignedTy:
    case symbol_kind_type::LongTy:
    case symbol_kind_type::FloatTy:
    case symbol_kind_type::DoubleTy:
    case symbol_kind_type::CharTy: {
        os << ControlSeq::Bold << ControlSeq::Blue;
        break;
    }
    case symbol_kind_type::KwdEnum:
    case symbol_kind_type::KwdStruct:
    case symbol_kind_type::KwdUnion:
    case symbol_kind_type::KwdIf:
    case symbol_kind_type::KwdElse:
    case symbol_kind_type::KwdSwitch:
    case symbol_kind_type::KwdWhile:
    case symbol_kind_type::KwdFor:
    case symbol_kind_type::KwdDo:
    case symbol_kind_type::KwdDefault:
    case symbol_kind_type::KwdCase:
    case symbol_kind_type::KwdGoto:
    case symbol_kind_type::KwdContinue:
    case symbol_kind_type::KwdBreak:
    case symbol_kind_type::KwdReturn: {
        os << ControlSeq::Bold << ControlSeq::Magenta;
        break;
    }
    case symbol_kind_type::ID:
    case symbol_kind_type::TypedefID:
    case symbol_kind_type::OpAssign:
    case symbol_kind_type::OpMulAssign:
    case symbol_kind_type::OpDivAssign:
    case symbol_kind_type::OpModAssign:
    case symbol_kind_type::OpPlusAssign:
    case symbol_kind_type::OpMinusAssign:
    case symbol_kind_type::OpLShiftAssign:
    case symbol_kind_type::OpRShiftAssign:
    case symbol_kind_type::OpBAndAssign:
    case symbol_kind_type::OpBXorAssign:
    case symbol_kind_type::OpBOrAssign:
    case symbol_kind_type::OpAnd:
    case symbol_kind_type::OpOr:
    case symbol_kind_type::OpNot:
    case symbol_kind_type::OpLT:
    case symbol_kind_type::OpLE:
    case symbol_kind_type::OpGT:
    case symbol_kind_type::OpGE:
    case symbol_kind_type::OpNE:
    case symbol_kind_type::OpEQ:
    case symbol_kind_type::OpQMark:
    case symbol_kind_type::OpColon:
    case symbol_kind_type::OpLShift:
    case symbol_kind_type::OpRShift:
    case symbol_kind_type::OpBAnd:
    case symbol_kind_type::OpBOr:
    case symbol_kind_type::OpBNot:
    case symbol_kind_type::OpBXor:
    case symbol_kind_type::OpDPlus:
    case symbol_kind_type::OpDMinus:
    case symbol_kind_type::OpPlus:
    case symbol_kind_type::OpMinus:
    case symbol_kind_type::OpAstrk:
    case symbol_kind_type::OpDiv:
    case symbol_kind_type::OpMod:
    case symbol_kind_type::OpDot:
    case symbol_kind_type::OpRArrow:
    case symbol_kind_type::OpSizeOf:
    case symbol_kind_type::OpLSB:
    case symbol_kind_type::OpRSB:
    case symbol_kind_type::OpComma:
    case symbol_kind_type::OpEllipsis: {
        break;
    }
    case symbol_kind_type::PSemi:
    case symbol_kind_type::PLC:
    case symbol_kind_type::PRC:
    case symbol_kind_type::PLP:
    case symbol_kind_type::PRP: {
        os << ControlSeq::Green;
        break;
    }
    case symbol_kind_type::UIntLiteral:
    case symbol_kind_type::SIntLiteral:
    case symbol_kind_type::FloatLiteral: {
        os << ControlSeq::Bold << ControlSeq::Green;
        break;
    }
    case symbol_kind_type::CharLiteral:
    case symbol_kind_type::StrUnit: {
        os << ControlSeq::Yellow;
        break;
    }
    case symbol_kind_type::SubscriptExpr:
    case symbol_kind_type::CallExpr:
    case symbol_kind_type::AccessExpr:
    case symbol_kind_type::ExplicitCastExpr:
    case symbol_kind_type::AddrOfExpr:
    case symbol_kind_type::DerefExpr:
    case symbol_kind_type::SizeOfExpr: {
        os << ControlSeq::Bold << ControlSeq::BrightMagenta;
        break;
    }
    case symbol_kind_type::KwdThen:
    case symbol_kind_type::OpUnaryPrec:
    case symbol_kind_type::PLParen:
    case symbol_kind_type::PRParen:
    case symbol_kind_type::PLSBracket:
    case symbol_kind_type::PRSBracket:
    case symbol_kind_type::ParseRoot:
    case symbol_kind_type::TransUnit:
    case symbol_kind_type::ExternDeclList:
    case symbol_kind_type::ExternDecl:
    case symbol_kind_type::DeclSpec:
    case symbol_kind_type::StorageSpec:
    case symbol_kind_type::SpecQualList:
    case symbol_kind_type::TypeSpec:
    case symbol_kind_type::FuncSpec:
    case symbol_kind_type::TypeQual:
    case symbol_kind_type::TypeName:
    case symbol_kind_type::BuiltinTypeSpec:
    case symbol_kind_type::AbsDecltr:
    case symbol_kind_type::DirAbsDecltr:
    case symbol_kind_type::StructOrUnionSpec:
    case symbol_kind_type::StructOrUnion:
    case symbol_kind_type::StructDeclBody:
    case symbol_kind_type::StructDeclList:
    case symbol_kind_type::StructDecl:
    case symbol_kind_type::StructDecltrList:
    case symbol_kind_type::StructDecltr:
    case symbol_kind_type::EnumSpec:
    case symbol_kind_type::EnumBody:
    case symbol_kind_type::EnumeratorList:
    case symbol_kind_type::Enumerator:
    case symbol_kind_type::EnumConst:
    case symbol_kind_type::Decltr:
    case symbol_kind_type::DirDecltr:
    case symbol_kind_type::Ptr:
    case symbol_kind_type::TypeQualList:
    case symbol_kind_type::Decl:
    case symbol_kind_type::DirDecl:
    case symbol_kind_type::InitDecltrList:
    case symbol_kind_type::InitDecltr:
    case symbol_kind_type::Initializer:
    case symbol_kind_type::InitializerList:
    case symbol_kind_type::Designation:
    case symbol_kind_type::DesignatorList:
    case symbol_kind_type::Designator:
    case symbol_kind_type::FuncDef:
    case symbol_kind_type::FuncDecltr:
    case symbol_kind_type::DirFuncDecltr:
    case symbol_kind_type::DirDecltrForFunc:
    case symbol_kind_type::ParamTypeList:
    case symbol_kind_type::ParamList:
    case symbol_kind_type::ParamDecl: {
        os << ControlSeq::Bold << ControlSeq::Green;
        break;
    }
    case symbol_kind_type::CompStmt:
    case symbol_kind_type::GeneralStmtList:
    case symbol_kind_type::Stmt:
    case symbol_kind_type::ExprStmt:
    case symbol_kind_type::SelStmt:
    case symbol_kind_type::LabeledStmt:
    case symbol_kind_type::JumpStmt:
    case symbol_kind_type::IterStmt: {
        os << ControlSeq::Bold << ControlSeq::BrightMagenta;
        break;
    }
    case symbol_kind_type::ForLoopBody:
    case symbol_kind_type::ConstExpr:
    case symbol_kind_type::Constant:
    case symbol_kind_type::PrimaryExpr:
    case symbol_kind_type::PostfixExpr:
    case symbol_kind_type::MemberAcessOp:
    case symbol_kind_type::UnaryExpr:
    case symbol_kind_type::UnaryArithOp:
    case symbol_kind_type::CastExpr:
    case symbol_kind_type::MulExpr:
    case symbol_kind_type::MulOp:
    case symbol_kind_type::DivOp:
    case symbol_kind_type::AddExpr:
    case symbol_kind_type::AddOp:
    case symbol_kind_type::ShiftExpr:
    case symbol_kind_type::ShiftOp:
    case symbol_kind_type::RelExpr:
    case symbol_kind_type::RelOp:
    case symbol_kind_type::EqualityExpr:
    case symbol_kind_type::EqualityOp:
    case symbol_kind_type::OpBAndExpr:
    case symbol_kind_type::OpBXorExpr:
    case symbol_kind_type::OpBOrExpr:
    case symbol_kind_type::LogicalOpAndExpr:
    case symbol_kind_type::LogicalOpOrExpr:
    case symbol_kind_type::CondExpr:
    case symbol_kind_type::AssignExpr:
    case symbol_kind_type::AssignOp:
    case symbol_kind_type::Expr:
    case symbol_kind_type::InitExpr:
    case symbol_kind_type::ArgList: {
        os << ControlSeq::Bold << ControlSeq::Green;
        break;
    }
    case symbol_kind_type::StringLiteral:
    case symbol_kind_type::IDWrapper: {
        os << ControlSeq::Bold << ControlSeq::Yellow;
        break;
    }
    }
    return os;
}

std::ostream &operator<<(std::ostream &os, ASTSymbolType sym) noexcept
{
    return os << getSymbolName(sym);
}

} // namespace internal

} // namespace splc